<?php

/**
 * @file
 * Paragraphs Aplenty module code.
 */

/**
 * Implements hook_theme().
 */
function paragraphs_aplenty_theme($existing, $type, $theme, $path) {

  $common = array(
    'path' => $path . '/templates',
    'base hook' => 'paragraphs_item',
  );

  return array(
    'paragraphs_item__aplenty_hero' => $common + array(
      'template' => 'paragraphs-item--aplenty-hero',
    ),
    'paragraphs_item__aplenty_media_list' => $common + array(
      'template' => 'paragraphs-item--aplenty-media-list',
    ),
    'paragraphs_item__aplenty_media_block' => $common + array(
      'template' => 'paragraphs-item--aplenty-media-block',
    ),
    'paragraphs_item__aplenty_cards' => $common + array(
      'template' => 'paragraphs-item--aplenty-cards',
    ),
    'paragraphs_item__aplenty_card' => $common + array(
      'template' => 'paragraphs-item--aplenty-card',
    ),
    'paragraphs_item__aplenty_grid' => $common + array(
      'template' => 'paragraphs-item--aplenty-grid',
    ),
    'paragraphs_item__aplenty_column' => $common + array(
      'template' => 'paragraphs-item--aplenty-column',
    ),
    'paragraphs_item__aplenty_column_wrapper' => $common + array(
      'template' => 'paragraphs-item--aplenty-column-wrapper',
    ),
    'paragraphs_item__aplenty_accordion' => $common + array(
      'template' => 'paragraphs-item--aplenty-accordion',
    ),
    'paragraphs_item__aplenty_accordion_item' => $common + array(
      'template' => 'paragraphs-item--aplenty-accordion-item',
    ),
    'paragraphs_item__aplenty_text' => $common + array(
      'template' => 'paragraphs-item--aplenty-text',
    ),
    'paragraphs_item__aplenty_heading' => $common + array(
      'template' => 'paragraphs-item--aplenty-heading',
    ),
    'paragraphs_item__aplenty_image' => $common + array(
      'template' => 'paragraphs-item--aplenty-image',
    ),
  );
}

/**
 * Implements hook_preprocess_paragraphs_item().
 */
function paragraphs_aplenty_preprocess_paragraphs_item(&$variables) {
  $path = backdrop_get_path('module', 'paragraphs_aplenty');
  backdrop_add_css($path . '/css/paragraphs-aplenty-grid.css');
  backdrop_add_css($path . '/css/paragraphs_aplenty.css');
  backdrop_add_js($path . '/js/paragraphs_aplenty.js');

  // Do any extra preprocessing in bundle specific functions.
  $bundle = $variables['paragraphs_item']->bundle();
  $func = '_paragraphs_aplenty_preprocess_' . $bundle;
  if (function_exists($func)) {
    $func($variables);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function paragraphs_aplenty_preprocess_field(&$variables, $hook) {
  // Do any extra preprocessing in field specific functions.
  $field_name = $variables['element']['#field_name'] ?? '';
  $func = '_paragraphs_aplenty_preprocess_' . $field_name;
  if (function_exists($func)) {
    $func($variables);
  }
}

/**
 * Preprocessing code for the Media List bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_media_list(&$variables) {
  $variables['classes_array'][] = 'aplenty-media_list';
  $variables['aplenty_media_list'] = array();
  if (empty($variables['content']['field_aplenty_paragraphs'])) {
    return;
  }

  $media_blocks = field_get_values($variables['paragraphs_item'], 'field_aplenty_paragraphs');
  foreach ($media_blocks as $key => $column_id) {
    $variables['aplenty_media_list'][] = $variables['content']['field_aplenty_paragraphs'][$key];
  }
  $variables['aplenty_row_class'] = _paragraphs_aplenty_row_class();
}

/**
 * Preprocessing code for the Media Block bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_media_block(&$variables) {
  $variables['classes_array'][] = 'aplenty-media_block';
  $width_class = _paragraphs_aplenty_get_width_class($variables['paragraphs_item']->hostEntity(), 'field_aplenty_media_width');
  _paragraphs_aplenty_preprocess_grid_column_prefixes($variables, $width_class);

  if ($variables['paragraphs_item']->hostEntity()) {
    $variables['elements']['#aplenty_media_class'] =  _paragraphs_aplenty_get_media_class($variables['paragraphs_item']->hostEntity());
  }
  if (empty($variables['elements']['#aplenty_media_class'])) {
    $variables['elements']['#aplenty_media_class'] = 'aplenty-media-left';
  }
  $variables['classes_array'][] = $variables['elements']['#aplenty_media_class'];
  $variables['content']['field_aplenty_image'][0]['#item']['attributes']['class'][] = 'aplenty-media_block-img';
}

/**
 * Preprocessing code for the Card bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_card(&$variables) {
  $variables['classes_array'][] = 'aplenty-card';
  $width_class = _paragraphs_aplenty_get_width_class($variables['paragraphs_item']->hostEntity(), 'field_aplenty_card_width');
  _paragraphs_aplenty_preprocess_grid_column_prefixes($variables, $width_class);

  $variables['content']['field_aplenty_image'][0]['#item']['attributes']['class'][] = 'aplenty-card-img';
  $paragraph = $variables['paragraphs_item'];
  if (!empty($paragraph->field_aplenty_title)) {
    $variables['content']['field_aplenty_title'][0]['#element']['attributes']['class'] = 'aplenty-card-title';
  }
  if (!empty($paragraph->field_aplenty_body)) {
    $variables['content']['field_aplenty_body'][0]['#element']['attributes']['class'] = 'aplenty-card-body';
  }
  if (!empty($paragraph->field_aplenty_link) && empty($variables['content']['field_aplenty_link'][0]['#element']['attributes']['class'])) {
    $link_classes = 'aplenty-button button button-primary btn btn-primary';
    $variables['content']['field_aplenty_link'][0]['#element']['attributes']['class'] = $link_classes;
  }
}

/**
 * Preprocessing code for the title.
 */
function _paragraphs_aplenty_preprocess_field_aplenty_title(&$variables) {
  $variables['items'][0]['#markup'] = '<h2>' . htmlspecialchars_decode($variables['items'][0]['#markup']) . '</h2>';
}

/**
 * Preprocessing code for the Cards bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_cards(&$variables) {
  $variables['classes_array'][] = 'aplenty-cards';

  $variables['aplenty_cards'] = array();
  if (empty($variables['content']['field_aplenty_paragraphs'])) {
    return;
  }
  $card_style_class = field_get_value($variables['paragraphs_item'], 'field_aplenty_card_style');

  if (empty($card_style_class)) {
    $card_style_class = 'aplenty-card-plain';
  }
  $variables['classes_array'][] = $card_style_class;

  $cards = field_get_values($variables['paragraphs_item'], 'field_aplenty_paragraphs');

  foreach ($cards as $key => $card_id) {
    // Copy them to another variable as a quick way to avoid printing
    // the field wrapper.
    $variables['aplenty_cards'][] = $variables['content']['field_aplenty_paragraphs'][$key];
  }
  $variables['aplenty_row_class'] = _paragraphs_aplenty_row_class();
}

/**
 * Preprocessing code for the Heading bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_heading(&$variables) {
  $variables['classes_array'][] = 'aplenty-heading';
  $heading = (string) field_get_value($variables['paragraphs_item'], 'field_aplenty_heading');
  $variables['heading_text'] = $heading ? $heading : '';
  $anchor = (string) field_get_value($variables['paragraphs_item'], 'field_aplenty_anchor');
  $anchor_text = $anchor ? backdrop_html_id(trim($anchor)) : '';
  if (!$anchor_text) {
    $anchor_text = backdrop_html_id($heading);
  }
  $variables['anchor_text'] = $anchor_text;
  $attributes = backdrop_attributes(array('id' => $anchor_text));
  $prefix = "<h2$attributes>";
  $suffix = '</h2>';
  $variables['heading'] = array(
    '#type' => 'markup',
    '#prefix' => $prefix,
    '#markup' => $heading,
    '#suffix' => $suffix,
  );
  if (module_exists('permalink_filter')) {
    $settings = config_get('permalink_filter.settings');
    $permalink = theme('permalink', array(
      'id' => $anchor_text,
      'text' => check_plain($settings['text']),
      'position' => $settings['position'],
      'value' => check_plain($heading),
      'css' => $settings['css'],
    ));
    if ($settings['position'] == 'before') {
      $variables['heading']['#prefix'] = $prefix . $permalink;
    }
    else {
      $variables['heading']['#suffix'] = $permalink . $suffix;
    }
  }
}

/**
 * Preprocessing code for the Hero bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_hero(&$variables) {
  $variables['classes_array'][] = 'aplenty-hero';
  // Set the classes on the button.
  $paragraph = $variables['paragraphs_item'];
  if (!empty($paragraph->field_aplenty_body)) {
    $variables['content']['field_aplenty_body'][0]['#element']['attributes']['class'] = 'aplenty-hero-body';
  }
  if (!empty($paragraph->field_aplenty_link) && empty($variables['content']['field_aplenty_link'][0]['#element']['attributes']['class'])) {
    $link_classes = 'aplenty-button button button-primary btn btn-primary';
    $variables['content']['field_aplenty_link'][0]['#element']['attributes']['class'] = $link_classes;
  }
  // We also need to set the inline CSS for the image.
  $image_fid = field_get_value($variables['paragraphs_item'], 'field_aplenty_image', 'fid');
  if (!empty($image_fid)) {
    // Make sure we have a unique ID, in case of multiple Heroes.
    $identifier = 'aplenty-hero-' . $image_fid;
    $variables['classes_array'][] = $identifier;
    $variables['classes_array'][] = 'aplenty-hero-image';
    // Inline the CSS background image.
    $img = file_create_url(field_get_value($variables['paragraphs_item'], 'field_aplenty_image', 'uri'));
    $css = ".$identifier.paragraphs-item.aplenty-hero { background-image:url($img); }";
    $variables['content']['field_aplenty_image'] = array(
      '#attached' => array(
        'css' => array(
          array(
            'data' => $css,
            'type' => 'inline',
          ),
        ),
      ),
    );
  }
  else {
    $variables['classes_array'][] = 'aplenty-hero-no-image';
  }
}

/**
 * Helper function to convert a fraction into a grid class.
 *
 * @param int $numerator
 *   The top part of the fraction.
 *
 * @param int $denominator
 *   The bottom part of the fraction.
 */
function _paragraphs_aplenty_fraction_to_class($numerator, $denominator) {
  if ($numerator == $denominator) {
    return '12';
  }
  // We could do a lot of fancy math here. But we won't.
  $classes_array = [
    // Denominators first.
    2 => [
      // Then numerators.
      1 => '6',
    ],
    3 => [
      1 => '4',
      2 => '8',
    ],
    4 => [
      1 => '3',
      2 => '6',
      3 => '9',
    ],
    6 => [
      1 => '2',
      2 => '4',
      3 => '6',
      4 => '8',
      5 => '10',
    ],
    12 => [
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5',
      6 => '6',
      7 => '7',
      8 => '8',
      9 => '9',
      10 => '10',
      11 => '11',
    ],
  ];
  if (!empty($classes_array[$denominator][$numerator])) {
    return $classes_array[$denominator][$numerator];
  }
  // If still here, it is some weird non-supported fraction.
  return '12';
}

/**
 * Preprocessing code for the Grid bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_grid(&$variables) {
  // Track the number of grids so column stretch calculations can be restricted
  // to the same grid.
  $grid_iteration = &backdrop_static('grid_iteration');
  if (!isset($grid_iteration)) {
    $grid_iteration = 0;
  }
  $grid_iteration++;

  $variables['classes_array'][] = 'aplenty-grid';

  $columns = field_get_values($variables['paragraphs_item'], 'field_aplenty_paragraphs');
  foreach ($columns as $key => $column_id) {
    // Copy them to another variable as a quick way to avoid printing
    // the field wrapper.
    $variables['aplenty_columns'][] = $variables['content']['field_aplenty_paragraphs'][$key];
  }
  $variables['aplenty_row_class'] = _paragraphs_aplenty_row_class();
}

/**
 * Preprocessing code for the Column bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_column(&$variables) {
  $width_class = _paragraphs_aplenty_get_grid_width_class($variables['paragraphs_item']->hostEntity());
  _paragraphs_aplenty_preprocess_grid_column_prefixes($variables, $width_class);
}

/**
 * Preprocessing code for the Column Wrapper bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_column_wrapper(&$variables) {
  $width_class = _paragraphs_aplenty_get_grid_width_class($variables['paragraphs_item']->hostEntity());
  _paragraphs_aplenty_preprocess_grid_column_prefixes($variables, $width_class);

  $variables['cards'] = array();
  if (empty($variables['content']['field_aplenty_paragraphs'])) {
    return;
  }
  $content_keys = element_children($variables['content']['field_aplenty_paragraphs']);
  foreach ($content_keys as $key) {
    $pairs[] = $variables['content']['field_aplenty_paragraphs'][$key];
  }
  $variables['column_items'] = $pairs;
}

/**
 * Preprocessing code for the Accordion bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_accordion(&$variables) {
  $variables['classes_array'][] = 'aplenty-accordion';

  if (field_get_value($variables['paragraphs_item'], 'field_aplenty_accordion_multi')) {
    $variables['classes_array'][] = 'aplenty-accordion-multi';
  }
  else {
    $variables['classes_array'][] = 'aplenty-accordion-single';
  }

  if (field_get_value($variables['paragraphs_item'], 'field_aplenty_accordion_bordered')) {
    $variables['classes_array'][] = 'aplenty-accordion-border';
  }
  else {
    $variables['classes_array'][] = 'aplenty-accordion-no-border';
  }

  if (field_get_value($variables['paragraphs_item'], 'field_aplenty_accordion_expand')) {
    $accordion_items = field_get_values($variables['paragraphs_item'], 'field_aplenty_paragraphs');
    $first_id = reset($accordion_items);
    $variables['content']['field_aplenty_paragraphs'][0]['entity']['paragraphs_item'][$first_id]['#aplenty_expand'] = TRUE;
  }

  // Copy to a separate variable for easy rendering without field markup.
  $variables['aplenty_accordion_items'] = array();
  if (!empty($variables['content']['field_aplenty_paragraphs'])){
    foreach (element_children($variables['content']['field_aplenty_paragraphs']) as $key) {
      $variables['aplenty_accordion_items'][] = $variables['content']['field_aplenty_paragraphs'][$key];
    }
  }
}

/**
 * Preprocessing code for the Accordion Item bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_accordion_item(&$variables) {
  $variables['accordion_title'] = field_get_value($variables['paragraphs_item'], 'field_aplenty_title');

  $expanded = (!empty($variables['elements']['#aplenty_expand']));
  $variables['expanded'] = ($expanded) ? 'open' : '';
}

/**
 * Preprocessing code for the Text bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_text(&$variables) {
  $variables['classes_array'][] = 'aplenty-text';
}

/**
 * Preprocessing code for the Image bundle.
 */
function _paragraphs_aplenty_preprocess_aplenty_image(&$variables) {
  $variables['classes_array'][] = 'aplenty-image';
  $variables['caption'] = isset($variables['content']['field_aplenty_caption'][0]) ? $variables['content']['field_aplenty_caption'][0] : '';
  $variables['caption_link'] = isset($variables['content']['field_aplenty_link'][0]) ? $variables['content']['field_aplenty_link'][0] : '';
}

/**
 * Get Media alignment class
 *
 * @param ParagraphsItemEntity $paragraph
 * @return string
 *   The css class.
 */
function _paragraphs_aplenty_get_media_class($paragraph) {
  $media_align = &backdrop_static('media_align_' . $paragraph->id());
  if (isset($media_align)) {
    return $media_align;
  }
  $media_align = field_get_value($paragraph, 'field_aplenty_media_align');

  return $media_align;
}

/**
 * Get width class
 *
 * @param ParagraphsItemEntity $paragraph
 * @param string $field_name
 * @return string
 *   The css class
 */
function _paragraphs_aplenty_get_width_class($paragraph, $field_name) {
  $width_class = &backdrop_static('width_class_' . $paragraph->id());
  if (isset($width_class)) {
    return $width_class;
  }
  $width_class = '12';
  $num_cards = (int) field_get_value($paragraph, $field_name);
  // The numerator is always 1.
  if ($num_cards) {
    $width_class = _paragraphs_aplenty_fraction_to_class(1, $num_cards);
  }

  return $width_class;
}

/**
 * Get Grid column calculations
 *
 * @param ParagraphsItemEntity $paragraph
 * @return array
 *   Array of calculations of: maximum columns, column to stretch, and available
 *   space.
 */
function _paragraphs_aplenty_calculate_grid_column($paragraph) {
  $calculations = &backdrop_static('grid_calculations_' . $paragraph->id());
  if (isset($calculations)) {
    return $calculations;
  }

  $max_columns = (int) field_get_value($paragraph, 'field_aplenty_column_width');
  $columns = field_get_values($paragraph, 'field_aplenty_paragraphs');
  $num_columns = count($columns);

  if ($num_columns > $max_columns) {
    $num_columns = $max_columns;
  }

  $stretch = (int) field_get_value($paragraph, 'field_aplenty_column_stretch');
  $available_space = $max_columns - $num_columns;

  $calculations = array($max_columns, $stretch, $available_space);

  return $calculations;
}

/**
 * Get Grid width class
 *
 * @param ParagraphsItemEntity $paragraph
 * @return string
 *   The css class.
 */
function _paragraphs_aplenty_get_grid_width_class($paragraph) {
  $column_iteration = &backdrop_static('column_iteration_' . $paragraph->id());
  $grid_iteration = &backdrop_static('grid_iteration');
  // Reset the column and grid count if this is a new grid.
  if (!isset($column_iteration) || $grid_iteration > 1) {
    $column_iteration = 1;
    $grid_iteration = 1;
  }

  list($max_columns, $stretch, $available_space) = _paragraphs_aplenty_calculate_grid_column($paragraph);

  // The numerator is normally 1.
  $numerator = 1;
  // But one column is allowed to stretch if configured to do so.
  if ($stretch && $stretch == $column_iteration) {
    $numerator += $available_space;
  }
  $column_iteration++;

  return _paragraphs_aplenty_fraction_to_class($numerator, $max_columns);
}

/**
 * Get the row class
 *
 * @return string
 */
function _paragraphs_aplenty_row_class() {
  $row_class = 'row';
  if (settings_get('paragraphs_aplenty_grid_class_prefix', 'g-col') == 'g-col') {
    $row_class = 'grid';
  }
  return $row_class;
}

/**
 * Add the grid column prefixes
 *
 * @param $variables
 * @param string $width_class
 */
function _paragraphs_aplenty_preprocess_grid_column_prefixes(&$variables, $width_class) {
  $grid_prefix = settings_get('paragraphs_aplenty_grid_class_prefix', 'g-col');
  $grid_breakpoint = settings_get('paragraphs_aplenty_grid_breakpoint', 'md');
  $variables['classes_array'][] = "{$grid_prefix}-12";
  $variables['classes_array'][] = "{$grid_prefix}-{$grid_breakpoint}-{$width_class}";
}

/**
 * Helper function to get the required fields for each type.
 *
 * @return
 *   A nested array of bundles to required field names.
 */
function _paragraphs_aplenty_get_required_fields() {
  return array(
    'aplenty_accordion' => array(
      'field_aplenty_accordion_multi',
      'field_aplenty_accordion_bordered',
      'field_aplenty_accordion_expand',
      'field_aplenty_paragraphs',
    ),
    'aplenty_accordion_item' => array(
      'field_aplenty_title',
      'field_aplenty_body',
    ),
    'aplenty_column' => array(
      'field_aplenty_body',
    ),
    'aplenty_column_wrapper' => array(
      'field_aplenty_paragraphs',
    ),
    'aplenty_grid' => array(
      'field_aplenty_column_width',
      'field_aplenty_column_stretch',
      'field_aplenty_paragraphs',
    ),
    'aplenty_hero' => array(
      'field_aplenty_image',
      'field_aplenty_title',
      'field_aplenty_body',
      'field_aplenty_link',
    ),
    'aplenty_media_list' => array(
      'field_aplenty_paragraphs',
      'field_aplenty_media_align',
      'field_aplenty_media_width',
    ),
    'aplenty_media_block' => array(
      'field_aplenty_title',
      'field_aplenty_image',
      'field_aplenty_body',
    ),
    'aplenty_cards' => array(
      'field_aplenty_card_width',
      'field_aplenty_paragraphs',
    ),
    'aplenty_card' => array(
      'field_aplenty_title',
      'field_aplenty_image',
      'field_aplenty_body',
      'field_aplenty_link',
    ),
    'aplenty_heading' => array(
      'field_aplenty_heading',
      'field_aplenty_anchor',
    ),
    'aplenty_image' => array(
      'field_aplenty_image',
      'field_aplenty_link',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paragraphs_aplenty_form_field_ui_field_delete_form_alter(&$form) {
  $entity_type = $form['entity_type']['#value'];
  $bundle = $form['bundle']['#value'];
  $field_name = $form['field_name']['#value'];
  if ('paragraphs_item' != $entity_type) {
    return;
  }
  $required = _paragraphs_aplenty_get_required_fields();
  if (empty($required[$bundle])) {
    return;
  }
  if (!in_array($field_name, $required[$bundle])) {
    return;
  }
  $form['paragraphs_aplenty']['#markup'] = t('NOTE: This field is required by Paragraphs Aplenty, and cannot be deleted.');
  $form['actions']['submit']['#access'] = FALSE;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function paragraphs_aplenty_field_widget_form_alter(&$form, $form_state, $context) {
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'paragraphs_item') {
    $path = backdrop_get_path('module', 'paragraphs_aplenty');
    backdrop_add_css($path . '/css/paragraphs-aplenty-grid.css');
    backdrop_add_css($path . '/css/paragraphs_aplenty.css');
  }
}
